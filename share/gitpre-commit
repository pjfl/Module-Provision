#!/usr/bin/env perl
# @(#)Ident: .gitpre-commit 2013-04-05 12:32 pjf ;

use strict;
use warnings;
use lib qw(lib);
use version; our $VERSION = qv( '0.1' );

use Date::Format          qw(time2str);
use English               qw(-no_match_vars);
use File::Spec::Functions qw(catfile updir);
use Module::Metadata;

my ($module, $rev);

my $file = -f 'Build.PL'    ? 'Build.PL'    :
           -f 'Makefile.PL' ? 'Makefile.PL' : undef;

if (defined $file) {
   open my $in, '<', $file or die 'File ${file} cannot open: ${OS_ERROR}';

   my $content = do { local $RS = undef; <$in> }; close $in;

   $module = (map    { eval $_ }
              map    { m{ \A \s* (?:module|name) \s* => \s* (.+) [,] }imx }
              grep   { m{ \A \s*   (module|name) }imx }
              split m{ [\n] }mx, $content)[ 0 ];

   my $distname = lc $module; $distname =~ s{ :: }{-}gmx;

   $file = catfile( updir, ".${distname}.rev" );

   if (-f $file) {
      open $in, '<', $file or die "Path ${file} cannot open: ${OS_ERROR}";
      $rev = do { local $RS = undef; <$in> }; close $in; chomp $rev; $rev++;
   }
}

if (defined $rev and qx{ git branch 2>/dev/null } =~ m{ \A [*] \s+ master }mx) {
   my @stat = split m{ \n }mx, qx{ git status --porcelain }; my $found = 0;

   for my $path (map { s{ \A .+ \s+ }{}mx; $_ } grep { m{ \A [AM] }mx } @stat) {
      open my $in,  '<', $path or die "Path ${path} cannot open: ${OS_ERROR}";

      my $content = do { local $RS = undef; <$in> }; close $in;

      $content =~ m{ \$ (Rev (?:ision)?) (?:[:] \s+ (\d+) \s+)? \$ }mx or next;
      $content =~ s{ \$ (Rev (?:ision)?) (?:[:] \s+ (\d+) \s+)? \$ }{\$$1\$}gmx;

      $rev < ($2 || 0) + 1 and $rev = ($2 || 0) + 1;

      $content =~ s{ \$ (Rev (?:ision)?) \$ }{\$$1: $rev \$}gmx;
      open my $out, '>', $path or die "Path ${path} cannot open: ${OS_ERROR}";
      print {$out} $content; close $out;

      my $cmd = "git add ${path}"; qx{ $cmd }; $found = 1;
   }

   if ($found) {
      open my $out, '>', $file or die "Path ${file} cannot open: ${OS_ERROR}";
      print ${out} "${rev}\n"; close $out;
   }
}

$file = -f 'Changes' ? 'Changes' : undef;

if (defined $file) {
   open my $in, '<', $file or die "File ${file} cannot open: ${OS_ERROR}";

   my $changes     = do { local $RS = undef; <$in> }; close $in;
   my $changes_ver = qv( (split q( ),
                          (grep { m{ \A v?[0-9._]+ \s+ }mx } split m{ [\n] }mx,
                           $changes)[ 0 ] || q())[ 0 ] || '0.1.1' );
   my $meta        = defined $module
                   ? Module::Metadata->new_from_module( $module ) : undef;
      $meta or warn "No meta object for module ${module}";
   my $module_ver  = $meta ? $meta->version : qv( '0.1.1' );

   if ($module_ver > $changes_ver) {
      my $stamp  = time2str( '%Y-%m-%d %H:%M:%S', time );
      my $header = sprintf "\n%-9.9s %s", $module_ver, $stamp;

      $changes =~ s{ ^ $ }{$header}mx;

      open my $out, '>', $file or die "File ${file} cannot open: ${OS_ERROR}";

      print {$out} $changes; close $out;

      my $cmd = "git add ${file}"; qx{ $cmd };
   }
}

exit 0;
